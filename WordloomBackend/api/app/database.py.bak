# -*- coding: utf-8 -*-
"""
wordloom_api/app/database.py
非破坏式微调版本：
- 优先复用你项目里的 SessionLocal（若 models.py 中已定义）
- 兜底：支持环境变量 DB_URL；若缺省，自动尝试定位前端 SQLite
"""
from typing import Generator, Optional
from sqlalchemy.orm import Session

# 优先使用你自己的 SessionLocal（若已在 models.py 中配置好 Engine/Session）
try:
    from models import SessionLocal  # type: ignore
except Exception:
    # 本地兜底：自动拼装 SQLite 连接
    from sqlalchemy import create_engine
    from sqlalchemy.orm import sessionmaker
    from pathlib import Path
    import os, sys

    # 1) 直接从环境变量读取（可传 sqlite:///absolute/path/to.db）
    db_url = os.getenv("DB_URL", "").strip()

    if not db_url:
        # 2) 未指定时，尝试自动定位前端常见数据库
        # <repo>/wordloom_api/app/database.py -> <repo>
        REPO_ROOT = Path(__file__).resolve().parents[2]

        candidates = [
            REPO_ROOT / "wordloom_frontend" / "translation_memory.db",
            REPO_ROOT / "wordloom_frontend" / "tm.db",
            REPO_ROOT / "translation_memory.db",
            REPO_ROOT / "tm.db",
        ]
        db_file: Optional[Path] = next((p for p in candidates if p.exists()), None)
        if db_file is None:
            # 3) 最后退回到本地 app.db（会自动创建）
            db_file = Path(__file__).resolve().parent / "app.db"

        db_url = f"sqlite:///{db_file}"

    engine = create_engine(db_url, future=True)
    SessionLocal = sessionmaker(bind=engine, expire_on_commit=False, future=True)

def get_db() -> Generator[Session, None, None]:
    """FastAPI 依赖注入：按请求获取/关闭 Session。"""
    db = SessionLocal()
    try:
        yield db
    finally:
        db.close()
