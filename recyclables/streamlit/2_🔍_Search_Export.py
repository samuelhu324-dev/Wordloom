import streamlit as st
import re
from datetime import datetime, timedelta, date
from io import BytesIO
from typing import List, Tuple, Optional, Any

import pandas as pd
from repo import search

# ‚¨áÔ∏è Êú¨Âú∞Â≠ó‰ΩìÂµåÂÖ• importÔºà‰øùÁïôÔºâ
import base64, pathlib
# ‚¨ÜÔ∏è

st.set_page_config(layout="wide", page_title="Translation Retrieval", page_icon="üîé")

# =========================
# Ê†∑ÂºèÔºöÊÇ¨ÊåÇÁº©ËøõÁî® GridÔºõÁºñÂè∑Âàó/Èó¥Ë∑ùÁªü‰∏Ä‰ΩøÁî® rem
# =========================
def _emit_font_css(embed_ok: bool, font_b64: Optional[str] = None, is_variable: bool = False, use_cdn: bool = False):
    if embed_ok and font_b64:
        st.markdown(
            f"""
            <style>
            @font-face {{
                font-family: 'NotoSerifSCEmbed';
                src: url(data:font/otf;base64,{font_b64}) format('opentype');
                font-weight: 100 900;
                font-style: normal;
                font-display: swap;
            }}
            :root {{
              --font-en-serif: "Constantia","Palatino Linotype","Palatino","Georgia",serif;
              --font-zh-serif: "NotoSerifSCEmbed","Noto Serif SC","Source Han Serif SC","SimSun","ÈúûÈπúÊñáÊ•∑","KaiTi",serif;

              --num-col-width: 2.4rem;
              --num-gap: 0.5rem;
            }}

            .highlight {{ background-color:#007BFF; color:#fff; padding:0 2px; border-radius:3px; }}
            .brk {{ color:#007BFF; }}

            .row {{
              display:grid;
              grid-template-columns: var(--num-col-width) 1fr;
              column-gap: var(--num-gap);
              align-items:start;
            }}
            .num {{
              color:#9ca3af;
              font-weight:400; 
              font-size:1.25rem; 
              font-family:"Palatino Linotype","Palatino","Georgia",serif;
              justify-self:end;
            }}
            .num.ghost {{ visibility:hidden; }}

            .source {{ margin-left: calc(var(--num-col-width) + var(--num-gap)); color:#6b7280; display:block; }}
            .ts     {{ margin-left: calc(var(--num-col-width) + var(--num-gap)); color:#6b7280; font-size:0.9rem; display:block; }}

            .src {{ font-size:1.1rem; line-height:1.6;  font-family:var(--font-en-serif); font-weight:500; margin-bottom:14px; display:block; }}
            .tgt {{ font-size:1.05rem; line-height:1.65; font-family:var(--font-zh-serif); font-weight:400; margin-bottom:18px; display:block; { 'font-variation-settings: "wght" 400;' if is_variable else '' } }}
            .block-container hr {{ margin:18px 0 22px 0; border:0; border-top:1px solid #e5e7eb; }}
            </style>
            """ ,
            unsafe_allow_html=True
        )
    elif use_cdn:
        st.markdown(
            """
            <style>
            @import url('https://fonts.googleapis.com/css2?family=Noto+Serif+SC:wght@400;500;600&display=swap');
            :root {
              --font-en-serif: "Constantia","Palatino Linotype","Palatino","Georgia",serif;
              --font-zh-serif: "Noto Serif SC","Source Han Serif SC","SimSun","ÈúûÈπúÊñáÊ•∑","KaiTi",serif;

              --num-col-width: 2.4rem;
              --num-gap: 0.5rem;
            }

            .highlight { background-color:#007BFF; color:#fff; padding:0 2px; border-radius:3px; }
            .brk { color:#007BFF; }

            .row { display:grid; grid-template-columns: var(--num-col-width) 1fr; column-gap: var(--num-gap); align-items:start; }
            .num { color:#9ca3af; font-weight:400; font-size:1.25rem; font-family:"Palatino Linotype","Palatino","Georgia",serif; justify-self:end; }
            .num.ghost { visibility:hidden; }

            .source { margin-left: calc(var(--num-col-width) + var(--num-gap)); color:#6b7280; display:block; }
            .ts     { margin-left: calc(var(--num-col-width) + var(--num-gap)); color:#6b7280; font-size:0.9rem; display:block; }

            .src { font-size:1.1rem; line-height:1.6; font-family:var(--font-en-serif); font-weight:500; margin-bottom:14px; display:block; }
            .tgt { font-size:1.05rem; line-height:1.65; font-family:var(--font-zh-serif); font-weight:400; margin-bottom:18px; display:block; }
            .block-container hr { margin:18px 0 22px 0; border:0; border-top:1px solid #e5e7eb; }
            </style>
            """ ,
            unsafe_allow_html=True
        )
    else:
        st.markdown(
            """
            <style>
            :root {
              --font-en-serif: "Constantia","Palatino Linotype","Palatino","Georgia",serif;
              --font-zh-serif: "Noto Serif SC","Source Han Serif SC","SimSun","ÈúûÈπúÊñáÊ•∑","KaiTi",serif;

              --num-col-width: 2.4rem;
              --num-gap: 0.5rem;
            }

            .highlight { background-color:#007BFF; color:#fff; padding:0 2px; border-radius:3px; }
            .brk { color:#007BFF; }

            .row { display:grid; grid-template-columns: var(--num-col-width) 1fr; column-gap: var(--num-gap); align-items:start; }
            .num { color:#9ca3af; font-weight:400; font-size:1.25rem; font-family:"Palatino Linotype","Palatino","Georgia",serif; justify-self:end; }
            .num.ghost { visibility:hidden; }

            .source { margin-left: calc(var(--num-col-width) + var(--num-gap)); color:#6b7280; display:block; }
            .ts     { margin-left: calc(var(--num-col-width) + var(--num-gap)); color:#6b7280; font-size:0.9rem; display:block; }

            .src { font-size:1.1rem; line-height:1.6; font-family:var(--font-en-serif); font-weight:500; margin-bottom:14px; display:block; }
            .tgt { font-size:1.05rem; line-height:1.65; font-family:var(--font-zh-serif); font-weight:400; margin-bottom:18px; display:block; }
            .block-container hr { margin:18px 0 22px 0; border:0; border-top:1px solid #e5e7eb; }
            </style>
            """ ,
            unsafe_allow_html=True
        )

# ËØªÂèñÊú¨Âú∞Â≠ó‰ΩìÂπ∂Â∞ùËØïÂÜÖÂµåÔºàÂ§ßÊñá‰ª∂Ëá™Âä®ÊîæÂºÉÔºåËΩ¨‰∏∫ CDNÔºâ
_font_b64 = None
try:
    font_path = pathlib.Path("assets/NotoSerifCJKsc-VF.otf")
    if font_path.exists():
        size_mb = font_path.stat().st_size / (1024*1024)
        if size_mb <= 10:
            _font_b64 = base64.b64encode(font_path.read_bytes()).decode()
            _emit_font_css(True, _font_b64, is_variable=True, use_cdn=False)
        else:
            _emit_font_css(False, None, is_variable=False, use_cdn=True)
    else:
        _emit_font_css(False, None, is_variable=False, use_cdn=True)
except Exception:
    _emit_font_css(False, None, is_variable=False, use_cdn=True)

# ========== ÂÖºÂÆπÊóßÂáΩÊï∞Ôºà‰∏çÊîπÂèòÊ†∑ÂºèÔºåÂè™Èò≤Êä•ÈîôÔºâ ==========
def _emit_font_css(embed_ok: bool, font_b64: Optional[str] = None):
    if embed_ok and font_b64:
        st.markdown(
            f"""
            <style>
            @font-face {{
                font-family: 'NotoSerifSCEmbed';
                src: url(data:font/otf;base64,{font_b64}) format('opentype');
                font-weight: normal;
                font-style: normal;
            }}
            </style>
            """ ,
            unsafe_allow_html=True
        )
    else:
        st.markdown("<style></style>", unsafe_allow_html=True)

try:
    font_path = pathlib.Path("assets/NotoSerifCJKsc-VF.otf")
    if font_path.exists():
        _font_b64 = base64.b64encode(font_path.read_bytes()).decode()
        _emit_font_css(True, _font_b64)
    else:
        _emit_font_css(False, None)
except Exception:
    _emit_font_css(False, None)

# =========================

st.title("üîé ÊêúÁ¥¢ / Search")

q  = st.text_input("ÂÖ≥ÈîÆËØç / Keyword")
ls = st.selectbox("Ê∫êËØ≠Ë®Ä / Source Lang", ["","en","zh"], index=1)
lt = st.selectbox("ÁõÆÊ†áËØ≠Ë®Ä / Target Lang", ["","zh","en"], index=1)

opt = st.selectbox(
    "Êó∂Èó¥Á≠õÈÄâ / Time Filter",
    ["ÂÖ®ÈÉ® / All", "ÊúÄËøë7Â§© / Last 7 days", "ÊúÄËøë30Â§© / Last 30 days", "Ëá™ÂÆö‰πâËåÉÂõ¥ / Custom Range"]
)
date_from = None
date_to   = None
if opt == "ÊúÄËøë7Â§© / Last 7 days":
    date_from = (datetime.now() - timedelta(days=7)).date().isoformat()
elif opt == "ÊúÄËøë30Â§© / Last 30 days":
    date_from = (datetime.now() - timedelta(days=30)).date().isoformat()
elif opt == "Ëá™ÂÆö‰πâËåÉÂõ¥ / Custom Range":
    c1, c2 = st.columns(2)
    with c1:
        df = st.date_input("ÂºÄÂßãÊó•Êúü / From", value=date.today())
    with c2:
        dt = st.date_input("ÁªìÊùüÊó•Êúü / To", value=date.today())
    date_from = df.isoformat() if df else None
    date_to   = dt.isoformat() if dt else None

limit = st.number_input("ÊØèÈ°µÊï∞Èáè / Page Size", 10, 200, 50)

def highlight(text: str, keywords: Optional[str]) -> str:
    if not keywords:
        return text
    words = [re.escape(k) for k in keywords.split() if k]
    if not words:
        return text
    pattern = re.compile("(" + "|".join(words) + ")", re.IGNORECASE)
    return pattern.sub(lambda m: f"<span class='highlight'>{m.group(0)}</span>", text)

def colorize_brackets(text: str) -> str:
    return re.sub(r'\[([^\[\]]+)\]', r"[<span class='brk'>\1</span>]", text)

def render_text(text: str, keywords: Optional[str]) -> str:
    s = colorize_brackets(text)
    s = highlight(s, keywords)
    return s

def safe_search(q, ls, lt, limit, date_from=None, date_to=None):
    try:
        return search(q, ls, lt, limit=limit, date_from=date_from, date_to=date_to)
    except TypeError:
        return search(q, ls, lt, limit=limit)

def fmt_ts(ts: Any) -> Optional[str]:
    if ts is None:
        return None
    if hasattr(ts, "strftime"):
        return ts.strftime("%Y-%m-%d %H:%M:%S")
    return str(ts)

go = st.button("ÊêúÁ¥¢ / Go")

export_rows: List[Tuple] = []

if go:
    rows = safe_search(q, ls or None, lt or None, limit=limit, date_from=date_from, date_to=date_to)
    export_rows = rows
    for i, row in enumerate(rows, start=1):
        _id, src, tgt = row[0], row[1], row[2]
        source_name = row[3] if len(row) >= 4 else None
        ts = row[4] if len(row) >= 5 else None
        src_h = render_text(src, q)
        tgt_h = render_text(tgt, q)

        st.markdown(f"<div class='row'><span class='num'>{i}.</span><span class='src'>{src_h}</span></div>", unsafe_allow_html=True)
        st.markdown(f"<div class='row'><span class='num ghost'>{i}.</span><span class='tgt'>{tgt_h}</span></div>", unsafe_allow_html=True)

        if source_name:
            st.markdown(f"<span class='source'>{source_name}</span>", unsafe_allow_html=True)
        ts_s = fmt_ts(ts)
        if ts_s:
            st.markdown(f"<span class='ts'>Êó∂Èó¥ / Time: {ts_s}</span>", unsafe_allow_html=True)
        st.markdown("---")

if export_rows:
    records = []
    for row in export_rows:
        rec = {
            "id": row[0],
            "src_text": row[1],
            "tgt_text": row[2],
            "source_name": row[3] if len(row) >= 4 else None,
            "created_at": fmt_ts(row[4]) if len(row) >= 5 else None,
        }
        records.append(rec)
    df = pd.DataFrame.from_records(records, columns=["id","src_text","tgt_text","source_name","created_at"])

    c1, c2 = st.columns(2)
    with c1:
        csv_bytes = df.to_csv(index=False).encode("utf-8-sig")
        st.download_button(
            "‚¨áÔ∏è ÂØºÂá∫ CSVÔºàÂê´ created_atÔºâ / Export CSV",
            data=csv_bytes,
            file_name="search_results.csv",
            mime="text/csv"
        )
    with c2:
        output = BytesIO()
        try:
            with pd.ExcelWriter(output, engine="openpyxl") as writer:
                df.to_excel(writer, index=False, sheet_name="results")
            st.download_button(
                "‚¨áÔ∏è ÂØºÂá∫ ExcelÔºàÂê´ created_atÔºâ / Export Excel",
                data=output.getvalue(),
                file_name="search_results.xlsx",
                mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
            )
        except Exception:
            st.info("Êú™ÂÆâË£Ö openpyxlÔºåÊöÇÊó∂Êó†Ê≥ïÂØºÂá∫ ExcelÔºå‰ªÖÊèê‰æõ CSV ÂØºÂá∫„ÄÇ")
