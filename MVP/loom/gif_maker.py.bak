# -*- coding: utf-8 -*-
"""
GIF Maker · 5–8s (palette optimized) + Thumbnail
- Save to project assets (repo paths)
- Auto name from input video
- MoviePy 2.x compatible
Run: streamlit run gif_maker.py
"""
import os
import re
import subprocess
import tempfile
from pathlib import Path
import streamlit as st

# ---------- Page ----------
st.set_page_config(page_title="GIF Maker (Assets + Auto-name)", page_icon="🎞️", layout="centered")
st.title("🎞️ GIF Maker · Assets Saver + 📸 Thumbnail (MoviePy 2.x)")

# ---------- Upload & GIF options ----------
uploaded = st.file_uploader("Upload video / 上传视频", type=["mp4", "mov", "webm", "mkv"])
width = st.selectbox("GIF Width 宽度", [480, 640, 720], index=1)
fps = st.slider("FPS 帧率", 6, 12, 8, 1)
duration = st.slider("Duration 时长（秒）", 5, 8, 8, 1)
start_time = st.text_input("Start 起始时间 (ss 或 hh:mm:ss)", "0")
loop = st.checkbox("Loop 无限循环", True)

# ---------- Naming helpers ----------
def slugify(name: str) -> str:
    # safe filename: letters, digits, underscore
    base = re.sub(r"[^\w\-]+", "_", name.strip())
    base = re.sub(r"_+", "_", base).strip("_")
    return base or "video"

stem_from_upload = "demo"
if uploaded is not None:
    try:
        stem_from_upload = Path(uploaded.name).stem
    except Exception:
        pass
auto_stem = slugify(stem_from_upload)

append_spec = st.checkbox("文件名追加规格后缀（_640w_8fps_8s）/ Append spec suffix", True)
spec_suffix = f"_{width}w_{fps}fps_{duration}s" if append_spec else ""

# output names auto from input
out_gif_default = f"{auto_stem}{spec_suffix}.gif"
out_thumb_default = f"{auto_stem}_thumb.jpg"

out_name = st.text_input("Output GIF 文件名（.gif）", out_gif_default)
thumb_name = st.text_input("缩略图文件名（.jpg）", out_thumb_default)

# ---------- Thumbnail options ----------
st.markdown("---")
st.subheader("📸 缩略图 / Thumbnail")
gen_thumb = st.checkbox("生成缩略图 Generate thumbnail", True)
thumb_width = st.selectbox("缩略图宽度 Thumbnail width", [200, 240, 320, 360, 480], index=1)
thumb_method = st.radio(
    "缩略图算法 / Method",
    ["smart-thumbnail（自动挑清晰帧）", "first-frame（第一帧）", "at-time（在指定秒）"],
    index=0, horizontal=True,
)
thumb_time = st.number_input("at-time：取帧秒数（仅在上面选择 at-time 生效）", min_value=0.0, max_value=600.0, value=2.0, step=0.5)
thumb_overlay = st.checkbox("在缩略图中央叠加 ▶ 播放图标（Pillow 实现）", False)

# ---------- Save-to-project (repo) ----------
st.markdown("---")
st.subheader("📦 保存到项目 / Save to project assets")
save_to_project = st.checkbox("保存到仓库 assets 结构（建议开启）/ Save to repo assets", True)

project_root = st.text_input(
    "项目根目录 Project root（用于拼装 assets 路径）",
    value=str(Path.cwd()),
    help="示例：D:\\Project\\Wordloom 或 /home/user/Wordloom"
)
gif_dir_rel = st.text_input("GIF 相对目录（相对于项目根）", "assets/media/gif")
img_dir_rel = st.text_input("缩略图相对目录（相对于项目根）", "assets/media/thumb")

def proj_path(*parts) -> Path:
    return normalize_root(project_root).joinpath(*parts)

# ---------- Path guards ----------
def normalize_root(p: str) -> Path:
    # Trim quotes/spaces and normalize separators
    p = (p or "").strip().strip('"').strip("'")
    return Path(p).expanduser().resolve()

def write_bytes_safe(dst: Path, data: bytes) -> Path:
    dst.parent.mkdir(parents=True, exist_ok=True)
    dst.write_bytes(data)
    # verify
    if not dst.exists() or dst.stat().st_size == 0:
        raise IOError(f"Write failed or zero-sized file: {dst}")
    return dst

# ---------- FFmpeg helpers ----------
CHOCO_BIN = r"C:\ProgramData\chocolatey\bin"

def has_ffmpeg() -> bool:
    try:
        r = subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        return r.returncode == 0
    except Exception:
        return False

def ensure_ffmpeg_in_path():
    if not has_ffmpeg() and Path(CHOCO_BIN).exists():
        os.environ["PATH"] = os.environ.get("PATH", "") + os.pathsep + CHOCO_BIN

def ffmpeg_version_str() -> str:
    try:
        r = subprocess.run(["ffmpeg", "-version"], stdout=subprocess.PIPE, stderr=subprocess.PIPE, text=True)
        if r.stdout: return r.stdout.splitlines()[0]
    except Exception:
        pass
    return "ffmpeg not found / 未检测到 ffmpeg"

# ---------- Misc helpers ----------
def normalize_start(s: str) -> str:
    s = str(s).strip()
    if s.isdigit(): return s
    parts = s.split(":")
    if len(parts) == 2: return f"00:{parts[0].zfill(2)}:{parts[1].zfill(2)}"
    if len(parts) == 3: return f"{parts[0].zfill(2)}:{parts[1].zfill(2)}:{parts[2].zfill(2)}"
    return "0"

def convert_ffmpeg(src: Path, dst: Path, start: str, dur: int, width: int, fps: int, loop_flag: bool):
    pal = src.with_suffix(".palette.png")
    vf1 = f"fps={fps},scale={width}:-1:flags=lanczos,palettegen"
    cmd1 = ["ffmpeg", "-y", "-ss", start, "-t", str(dur), "-i", str(src), "-vf", vf1, str(pal)]
    st.code(" ".join(cmd1), language="bash"); r1 = subprocess.run(cmd1, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if r1.returncode != 0: raise RuntimeError("ffmpeg palettegen failed · 生成调色板失败")
    lavfi = f"fps={fps},scale={width}:-1:flags=lanczos [x]; [x][1:v] paletteuse"
    cmd2 = ["ffmpeg", "-y", "-ss", start, "-t", str(dur), "-i", str(src), "-i", str(pal), "-lavfi", lavfi, str(dst)]
    st.code(" ".join(cmd2), language="bash"); r2 = subprocess.run(cmd2, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if r2.returncode != 0: raise RuntimeError("ffmpeg paletteuse failed · 调色板合成失败")

def convert_moviepy(src: Path, dst: Path, start: str, dur: int, width: int, fps: int, loop_flag: bool):
    from moviepy import VideoFileClip  # MoviePy 2.x
    # parse start seconds
    ss = 0
    if ":" in start:
        parts = [int(x) for x in start.split(":")]
        if len(parts) == 3: ss = parts[0]*3600 + parts[1]*60 + parts[2]
        elif len(parts) == 2: ss = parts[0]*60 + parts[1]
    else:
        try: ss = int(start)
        except: ss = 0
    clip = VideoFileClip(str(src))
    sub = clip.subclip(ss, min(clip.duration, ss + dur)).resize(width=width)
    try:
        sub.write_gif(str(dst), fps=fps, loop=0 if loop_flag else 1)
    finally:
        clip.close(); sub.close()

# ---------- Thumbnail ----------
def gen_thumbnail_ffmpeg(gif_path: Path, jpg_path: Path, width: int, method_ui: str, t: float):
    if "smart" in method_ui:
        vf = f"thumbnail,scale={width}:-1:flags=lanczos"
        cmd = ["ffmpeg", "-y", "-i", str(gif_path), "-vf", vf, "-frames:v", "1", str(jpg_path)]
    elif "first" in method_ui:
        vf = f"select=eq(n\\,0),scale={width}:-1:flags=lanczos"
        cmd = ["ffmpeg", "-y", "-i", str(gif_path), "-vf", vf, "-frames:v", "1", str(jpg_path)]
    else:
        vf = f"scale={width}:-1:flags=lanczos"
        cmd = ["ffmpeg", "-y", "-ss", str(max(0.0, t)), "-i", str(gif_path), "-vframes", "1", "-vf", vf, str(jpg_path)]
    st.code(" ".join(cmd), language="bash")
    r = subprocess.run(cmd, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
    if r.returncode != 0: raise RuntimeError("ffmpeg thumbnail 生成失败")

def gen_thumbnail_pillow(gif_path: Path, jpg_path: Path, width: int, overlay: bool):
    from PIL import Image, ImageDraw
    im = Image.open(str(gif_path))
    try: im.seek(0)
    except Exception: pass
    im = im.convert("RGB")
    w, h = im.size
    nh = int(h * (width / float(w)))
    im = im.resize((width, nh))
    if overlay:
        draw = ImageDraw.Draw(im)
        cx, cy = width // 2, nh // 2
        r = max(20, width // 10)
        draw.ellipse((cx - r, cy - r, cx + r, cy + r), fill=(0, 0, 0, 90))
        tri = [(cx - r//3, cy - r//2), (cx - r//3, cy + r//2), (cx + r//2, cy)]
        draw.polygon(tri, fill=(255, 255, 255))
    im.save(str(jpg_path), quality=92)

def make_dirs(p: Path):
    p.parent.mkdir(parents=True, exist_ok=True)

# ---------- Header info ----------
ensure_ffmpeg_in_path()
st.caption("🔍 " + ffmpeg_version_str())
st.caption("💡 若未检测到 ffmpeg，已尝试临时加入 Chocolatey 路径。")

# ---------- Action ----------
if st.button("Convert / 开始转换", type="primary", disabled=not uploaded):
    if not uploaded:
        st.warning("请先上传一个视频 / Please upload a video.")
    else:
        with tempfile.TemporaryDirectory() as td:
            # write upload to temp
            src = Path(td) / uploaded.name
            src.write_bytes(uploaded.getvalue())

            # determine output targets
            tmp_gif = Path(td) / (out_name if out_name.lower().endswith(".gif") else out_name + ".gif")
            start = normalize_start(start_time)

            # do conversion
            try:
                if has_ffmpeg():
                    with st.spinner("Using ffmpeg (palette optimized)… 正在用 ffmpeg 调色板优化转换…"):
                        convert_ffmpeg(src, tmp_gif, start, int(duration), int(width), int(fps), loop)
                else:
                    with st.spinner("未检测到 ffmpeg，使用 MoviePy 回退方案…"):
                        convert_moviepy(src, tmp_gif, start, int(duration), int(width), int(fps), loop)
            except Exception as e:
                st.error(f"转换失败：{e}")
            else:
                st.success("✅ GIF 完成")
                st.image(str(tmp_gif), caption=tmp_gif.name)

                # decide final save paths
                if save_to_project:
                    gif_out = proj_path(gif_dir_rel, tmp_gif.name)
                    make_dirs(gif_out)
                    gif_out = write_bytes_safe(gif_out, tmp_gif.read_bytes())
                    st.success(f"📁 已保存到项目：{gif_out}")
                try:
                    st.button('打开 GIF 文件夹 · Open GIF Folder', on_click=lambda: os.startfile(str(gif_out.parent)))
                except Exception:
                    pass
                else:
                    gif_out = tmp_gif

                # thumbnail
                thumb_path_tmp = Path(td) / (thumb_name if thumb_name.lower().endswith(".jpg") else thumb_name + ".jpg")
                if gen_thumb:
                    try:
                        if has_ffmpeg():
                            with st.spinner("ffmpeg 生成缩略图…"):
                                gen_thumbnail_ffmpeg(gif_out, thumb_path_tmp, int(thumb_width), thumb_method, float(thumb_time))
                        else:
                            with st.spinner("Pillow 生成缩略图…"):
                                gen_thumbnail_pillow(gif_out, thumb_path_tmp, int(thumb_width), bool(thumb_overlay))
                        if save_to_project:
                            thumb_out = proj_path(img_dir_rel, thumb_path_tmp.name)
                            make_dirs(thumb_out)
                            thumb_out = write_bytes_safe(thumb_out, thumb_path_tmp.read_bytes())
                            st.success(f"📁 缩略图已保存到项目：{thumb_out}")
                            try:
                                st.button('打开缩略图文件夹 · Open Thumbnail Folder', on_click=lambda: os.startfile(str(thumb_out.parent)))
                            except Exception:
                                pass
                        else:
                            thumb_out = thumb_path_tmp
                        st.image(str(thumb_out), caption=thumb_out.name)
                    except Exception as e:
                        thumb_out = None
                        st.warning(f"缩略图生成失败：{e}")
                else:
                    thumb_out = None

                # downloads (always available)
                st.download_button("下载 GIF · Download GIF", data=gif_out.read_bytes(), file_name=gif_out.name, mime="image/gif")
                if thumb_out:
                    st.download_button("下载缩略图 · Download Thumbnail", data=thumb_out.read_bytes(), file_name=thumb_out.name, mime="image/jpeg")

                # embed snippets
                st.markdown("### 📎 Embed Snippets · 嵌入片段")
                if save_to_project:
                    rel_gif = Path(gif_dir_rel).as_posix().strip("/") + f"/{gif_out.name}"
                    rel_jpg = Path(img_dir_rel).as_posix().strip("/") + f"/{thumb_out.name}" if thumb_out else "assets/media/img/your_thumb.jpg"
                else:
                    # fallback: suggest assets path
                    rel_gif = "assets/media/gif/" + gif_out.name
                    rel_jpg = "assets/media/img/" + (thumb_out.name if thumb_out else "your_thumb.jpg")

                st.markdown("**Markdown（折叠：缩略图 + 点击播放 GIF）**")
                st.code(
                    f"<details><summary><img src=\"../{rel_jpg}\" width=\"120\" alt=\"thumb\" /> {Path(gif_out.name).stem}</summary>\n"
                    f"  <img src=\"../{rel_gif}\" width=\"360\" loading=\"lazy\" alt=\"{Path(gif_out.name).stem}\" />\n"
                    f"</details>", language="markdown"
                )

                st.markdown("**HTML（更宽展示）**")
                st.code(
                    f"<details><summary><img src=\"../{rel_jpg}\" width=\"140\" alt=\"thumb\" /> {Path(gif_out.name).stem}</summary>"
                    f"<img src=\"../{rel_gif}\" width=\"480\" loading=\"lazy\" alt=\"{Path(gif_out.name).stem}\" /></details>",
                    language="html"
                )

st.caption("Tips: 勾选“保存到仓库 assets”后，会把文件写到项目根下的 assets/media/gif 与 assets/media/img。文件名默认同步输入视频名，可选追加规格后缀。")
